install.packages("ggplot2")
install.packages("bain")
library(bain)
install.packages("restriktor")
library(bain)
library(restriktor)
getwd()
#Read data
monin_data <- read.table("monin.txt")
chooose.file()
choose.file()
choose.files()
choose.dir()
choose.files()
#Read data
monin_data <- read.table("C:\\Users\\barra006\\Documents\\Courses\\Bayesian_hypothesis_testing\\S003 - Eval Info Hypo\\R labmeeting\\R - bain\\monin.txt")
View(monin_data)
#Read data
monin_data <- read.table("C:\\Users\\barra006\\Documents\\Courses\\Bayesian_hypothesis_testing\\S003 - Eval Info Hypo\\R labmeeting\\R - bain\\monin.txt", header = TRUE)
library(MASS)
library(bain)
library(psych)
install.packages("psych")
library(psych)
monin_data$group <- factor(monin_data$group)
holubar <- read.table("C:\\Users\\barra006\\Documents\\Courses\\Bayesian_hypothesis_testing\\S003 - Eval Info Hypo\\R labmeeting\\R - bain\\holubar.txt",header = TRUE)
#Descriptives
descriptives <- describeBy(monin$attract,monin_data$group,mat = TRUE)
#Descriptives
descriptives <- describeBy(monin_data$attract,monin_data$group,mat = TRUE)
print(descriptives)
#Means in each group and residual variance
prep_monin <-  lm(attract~group-1, data=monin_data)
estm <- coef(prep_monin)
print(estm)
names(estm) <- c("g1","g2","g3")
varm <- (summary(prepmonin)$sigma)**2
varm <- (summary(prep_monin)$sigma)**2
sampm <- table(monin_data$group)
sampm
varm
cov1m <- matrix(cov1m,1,1)
cov2m <- matrix(cov2m,1,1)
cov3m <- matrix(cov3m,1,1)
covm<-list(cov1m,cov2m,cov3m)
cov1m <- varm/sampm[1] #variance of sample size of g1
cov2m <- varm/sampm[2]
cov3m <- varm/sampm[3]
cov1m <- matrix(cov1m,1,1)
cov2m <- matrix(cov2m,1,1)
cov3m <- matrix(cov3m,1,1)
covm<-list(cov1m,cov2m,cov3m)
set.seed(100)
resmonin <- bain(estm,"g1 = g2 = g3",n=sampm,Sigma=covm,group_parameters=1,joint_parameters = 0)
print(resmonin)
sampm
covm
estm
set.seed(54)
resmonin <- bain(estm,"g1 = g2 = g3", n = sampm, Sigma = covm, group_parameters = 1, joint_parameters = 0)
print(resmonin)
set.seed(100)
resmonin <- bain(estm,"g1 = g2 = g3; g1 = g2; g1 = g3; g2 = g3", n = sampm, Sigma = covm, group_parameters = 1, joint_parameters = 0)
print(resmonin)
set.seed(54)
resmonin <- bain(estm,"g1 = g2 = g3; g1 = g2; g1 = g3; g2 = g3", n = sampm, Sigma = covm, group_parameters = 1, joint_parameters = 0)
print(resmonin)
install.packages("rstudioapi")
getwd()
theme_49th_parallel <- fs::path_temp("49th_parallel-RStudio",
ext = "rstheme")
install.packages("fs")
# create temporary download directory
theme_49th_parallel <- fs::path_temp("49th_parallel-RStudio",
ext = "rstheme")
# download theme from github
download.file("https://raw.githubusercontent.com/wvictor14/rstudio_themes/master/49th%20Parallel.rstheme",
theme_49th_parallel)
# apply the theme
rstudioapi::addTheme(theme_49th_parallel,
apply = TRUE)
# Dark variant
rstudioapi::addTheme("https://github.com/DesiQuintans/Pebble-safe/releases/download/1.0.0/Pebble-Safe_Dark.rstheme",
apply = TRUE, force = TRUE)
# Light variant:
rstudioapi::addTheme("https://github.com/DesiQuintans/Pebble-safe/releases/download/1.0.0/Pebble-Safe_Light.rstheme",
apply = TRUE, force = TRUE)
# Dark variant
rstudioapi::addTheme("https://github.com/DesiQuintans/Pebble-safe/releases/download/1.0.0/Pebble-Safe_Dark.rstheme",
apply = TRUE, force = TRUE)
# Light variant:
rstudioapi::addTheme("https://github.com/DesiQuintans/Pebble-safe/releases/download/1.0.0/Pebble-Safe_Light.rstheme",
apply = TRUE, force = TRUE)
############################ LME4 tutorial #############################
# Libraries
library(tidyverse)
# Libraries
library(lme4)
library(haven)
library(RColorBrewer)
library(lmerTest)
install.packages("lme4";"tidyverse";"haven";"lmerTest")
install.packages("lme4","tidyverse","haven","lmerTest")
library(lme4)
install.packages(c("lme4","tidyverse","haven","lmerTest"))
library(lme4)
library(tidyverse)
library(haven)
library(RColorBrewer)
library(lmerTest)
choose.files()
# Data
popular2data <- read_sav("C:\\Users\\barra006\\Downloads\\popular2.sav")
head(popular2data)
dim(popular2data)
names(popular2data)
str(popular2data)
popular2data <- select(popular2data, pupil, class, extrav, sex, texp, popular)
head(popular2data)
# Plots
ggplot(data = popular2data, aes(extrav, popular)) +
geom_point(alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion")
# Plots
ggplot(data = popular2data, aes(extrav, popular)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion")
# Plots
ggplot(data = popular2data, aes(extrav, popular)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8)
# Plots
ggplot(data = popular2data, aes(extrav, popular, col=class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8) +
scale_color_brewer(colours = rainbow(100))
# Plots
ggplot(data = popular2data, aes(extrav, popular, col=class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8) +
scale_color_gradient(colours = rainbow(100))
# Plots
ggplot(data = popular2data, aes(extrav, popular, col = class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8)
# Plots
ggplot(data = popular2data, aes(extrav, popular, col = class, group = class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8)
# Plots
ggplot(data = popular2data, aes(extrav, popular, col = class, group = class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8) +
scale_color_gradient(colours = rainbow(100))
# Plots
ggplot(data = popular2data, aes(extrav, popular, col = class, group = class)) +
geom_point(size = 1.2, alpha = 0.8, position = "jitter") +
theme_minimal() + labs(title = "Popularity vs. Extraversion") +
scale_color_gradient(colours = rainbow(100)) +
geom_smooth(method = lm, se = FALSE, size = 0.5, alpha = 0.8)
## Function to code the extremes.
f1 <- function(data, x, y, grouping, n.highest = 3, n.lowest = 3){
groupinglevel <- data[,grouping]
res           <- data.frame(coef = rep(NA, length(unique(groupinglevel))), group = unique(groupinglevel))
names(res)    <- c("coef", grouping)
for(i in 1:length(unique(groupinglevel))){
data2    <- as.data.frame(data[data[,grouping] == i,])
res[i,1] <- as.numeric(lm(data2[, y] ~ data2[, x])$coefficients[2])
}
top    <- res %>% top_n(n.highest, coef)
bottom <- res %>% top_n(-n.lowest, coef)
res    <- res %>% mutate(high_and_low = ifelse(coef %in% top$coef, "top",  ifelse(coef %in% bottom$coef, "bottom", "none")))
data3  <- left_join(data, res)
return(data3)
}
f1(data = as.data.frame(popular2data),
x    = "extrav",
y    = "popular",
grouping = "class",
n.highest = 3,
n.lowest = 3) %>%
ggplot()+
geom_point(aes(x     = extrav,
y     = popular,
fill  = class,
group = class),
size     =  1,
alpha    = .5,
position = "jitter",
shape    = 21,
col      = "white")+
geom_smooth(aes(x     = extrav,
y     = popular,
col   = high_and_low,
group = class,
size  = as.factor(high_and_low),
alpha = as.factor(high_and_low)),
method = lm,
se     = FALSE)+
theme_minimal()+
theme(legend.position = "none")+
scale_fill_gradientn(colours = rainbow(100))+
scale_color_manual(values=c("top"      = "blue",
"bottom"   = "red",
"none"     = "grey40"))+
scale_size_manual(values=c("top"       = 1.2,
"bottom"   = 1.2,
"none"     = .5))+
scale_alpha_manual(values=c("top"      = 1,
"bottom"    = 1,
"none"      =.3))+
labs(title="Linear Relationship Between Popularity and Extraversion for 100 Classes",
subtitle="The 6 with the most extreme relationship have been highlighted red and blue")
# Multilevel analysis ------------------------------------------------------
## Intercept only model
intercept.model <- lmer(formula = popular ~ 1 + (1|class),
data = popular2data)
#between brackets we have the random effects/slopes.
summary(intercept.model)
## Adding first level predictors
ggplot(data = popular2data,
aes(x   = extrav,
y   = popular,
col = as.factor(sex)))+
geom_point(size     = 1,
alpha    = .7,
position = "jitter")+
geom_smooth(method   = lm,
se       = T,
size     = 1.5,
linetype = 1,
alpha    = .7)+
theme_minimal()+
labs(title    = "Linear Relationship Between Popularity and Extraversion for the 2 Genders",
subtitle = "The linear relationship between the two is similar for both genders, with a clear intercept difference")+
scale_color_manual(name   =" Gender",
labels = c("Boys", "Girls"),
values = c("orange", "pourple"))
## Adding first level predictors
ggplot(data = popular2data,
aes(x   = extrav,
y   = popular,
col = as.factor(sex)))+
geom_point(size     = 1,
alpha    = .7,
position = "jitter")+
geom_smooth(method   = lm,
se       = T,
size     = 1.5,
linetype = 1,
alpha    = .7)+
theme_minimal()+
labs(title    = "Linear Relationship Between Popularity and Extraversion for the 2 Genders",
subtitle = "The linear relationship between the two is similar for both genders, with a clear intercept difference")+
scale_color_manual(name   =" Gender",
labels = c("Boys", "Girls"),
values = c("orange", "purple"))
model.1 <- lmer(formula = popular ~ 1 + sex + extrav + (1|class),
data = popular2data)
summary(model.1)
## Second level predictors
model.2 <- lmer(formula = popular ~1 + sex + extrav + texp + (1|class))
## Second level predictors
model.2 <- lmer(formula = popular ~1 + sex + extrav + texp + (1|class),
data = popular2data)
summary(model.2)
0.2954+0.5920
## Adding random slope
model.3 <- lmer(formula = popular ~1 + sex + extrav + texp + (1 + sex + extrav|class),
data = popular2data)
summary(model.3)
model.3b <- lmer(formula = popular ~1 + sex + extrav + texp + (1 + extrav|class),
data = popular2data)
summary(model.3b)
## Adding cross-level interaction
model.4 <- lmer(formula = popular ~ 1 + sex + extrav + texp + extrav:texp +
(1 + extrav|class), data = popular2data)
summary(model.4)
(1.2218-0.5528)/1.2218
(0.7021-0.4786)/0.7021
(1.2218-0.5920)/1.2218
(0.7021-0.2954)/0.7021
ggplot(data = popular2data,
aes(x = extrav,
y = popular,
col = as.factor(texp)))+
viridis::scale_color_viridis(discrete = TRUE)+
geom_point(size     = .7,
alpha    = .8,
position = "jitter")+
geom_smooth(method = lm,
se     = FALSE,
size   = 2,
alpha  = .8)+
theme_minimal()+
labs(title    = "Linear Relationship for Different Years of Teacher Experience as Observed",
subtitle = "The linear relationship between the two is not the same for all classes",
col      = "Years of\nTeacher\nExperience")
library(viridisLite)
ggplot(data = popular2data,
aes(x = extrav,
y = popular,
col = as.factor(texp)))+
viridis::scale_color_viridis(discrete = TRUE)+
geom_point(size     = .7,
alpha    = .8,
position = "jitter")+
geom_smooth(method = lm,
se     = FALSE,
size   = 2,
alpha  = .8)+
theme_minimal()+
labs(title    = "Linear Relationship for Different Years of Teacher Experience as Observed",
subtitle = "The linear relationship between the two is not the same for all classes",
col      = "Years of\nTeacher\nExperience")
install.packages("viridis")
library(viridis)
ggplot(data = popular2data,
aes(x = extrav,
y = popular,
col = as.factor(texp)))+
viridis::scale_color_viridis(discrete = TRUE)+
geom_point(size     = .7,
alpha    = .8,
position = "jitter")+
geom_smooth(method = lm,
se     = FALSE,
size   = 2,
alpha  = .8)+
theme_minimal()+
labs(title    = "Linear Relationship for Different Years of Teacher Experience as Observed",
subtitle = "The linear relationship between the two is not the same for all classes",
col      = "Years of\nTeacher\nExperience")
plot(fitted(model.4), resid(model.4, type = "pearson"))
abline(0,0, col = "blue")
## QQ plot (check normality)
qqnorm(resid(model.4))
qqline(resid(model.4), col = "red")
## Also checkng normality for the two random effects (intercept and extrav).
qqnorm(ranef(model.4)$class[, 1])
qqline(ranef(model.4)$class[, 1], col = "red")
qqnorm(ranef(model.4)$class[, 2])
qqline(ranef(model.4)$class[, 2], col = "red")
ggplot(data = popular2data,
aes(x = extrav,
y = popular,
col = as.factor(texp)))+
viridis::scale_color_viridis(discrete = TRUE)+
geom_point(size     = .7,
alpha    = .8,
position = "jitter")+
geom_smooth(method = lm,
se     = FALSE,
size   = 2,
alpha  = .8)+
theme_minimal()+
labs(title    = "Linear Relationship for Different Years of Teacher Experience as Observed",
subtitle = "The linear relationship between the two is not the same for all classes",
col      = "Years of\nTeacher\nExperience")
matrix(c(1, 2, 3, 4), ncol = 2)
??cookiecutter
getwd
getwd()
library(usethis)
install.packages("usethis")
usethis::use_zip("https://github.com/bvreede/good-enough-project-template/archive/refs/heads/master.zip",
destdir = getwd())
install.packages("lintr")
install.packages("styler")
library(lintr)
library(styler)
lint(data_generation.R)
lintr::lint(data_generation.R)
library(lintr)
library(lintr)
library(lintr)
library(lintr)
library(lintr)
lintr::lint("data_generation.R")
getwd()
setwd(./CRT-power-analysis-bayes-factor/scripts)
setwd(CRT-power-analysis-bayes-factor/scripts)
choose.dir()
setwd("C:\\Users\\barra006\\OneDrive - Universiteit Utrecht\\Documents\\CRT-power-analysis-bayes-factor\\scripts")
library(lintr)
lintr::lint("data_generation.")
lintr::lint("data_generation.R")
install.packages("lintr")
lintr::lint("data_generation.R")
install.packages("remotes")
lintr::lint("data_generation.R")
library(styler)
style_file("data_generation.R")
lintr::lint("data_generation.R")
lintr::lint("data_generation.R")
